{{ $pfield := fieldByName .Struct "PublicID" }}
{{ $ptag := getTag $pfield "sql" "json" }}

var (
    config = sql.Config{
        DBName: os.Getenv("{{.ENVName}}_SQL_TEST_DB"),
        User: os.Getenv("{{.ENVName}}_SQL_TEST_USER"),
        DBIP: os.Getenv("{{.ENVName}}_SQL_TEST_ADDR"),
        DBPort: os.Getenv("{{.ENVName}}_SQL_TEST_PORT"),
        DBDriver: os.Getenv("{{.ENVName}}_SQL_TEST_Driver"),
        UserPassword: os.Getenv("{{.ENVName}}_SQL_TEST_PASSWORD"),
    }

    testCol = "{{lower .Struct.Object.Name.Name}}_test"
)

// TestGet{{.Struct.Object.Name}} validates the retrieval of a {{.Struct.Object.Name}}
// record from a sqldb.
func TestGet{{.Struct.Object.Name}}(t *testing.T){
	events := metrics.New()
	if testing.Verbose(){
		events = metrics.New(custom.StackDisplay(os.Stdout))
	}

    api := sqldb.New(testCol, events, sql.NewDB(config, events))

	ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

	defer api.Delete(ctx, elem.PublicID)

	if err := api.Create(ctx, elem); err != nil {
		tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
	}
	tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")

	_, err = api.Get(ctx, elem.PublicID)
	if err != nil {
		tests.Failed("Successfully retrieved stored record for {{.Struct.Object.Name}} from db: %+q.", err)
	}
	tests.Passed("Successfully retrieved stored record for {{.Struct.Object.Name}} from db.")
}

// TestGetAll{{.Struct.Object.Name}} validates the retrieval of all {{.Struct.Object.Name}}
// record from a sqldb.
func TestGetAll{{.Struct.Object.Name}}(t *testing.T){
	events := metrics.New()
	if testing.Verbose(){
		events = metrics.New(custom.StackDisplay(os.Stdout))
	}
    api := sqldb.New(testCol, events, sql.NewDB(config, events))

	ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

	defer api.Delete(ctx, elem.PublicID)

	if err := api.Create(ctx, elem); err != nil {
		tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
	}
	tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")

	records, err := api.GetAllByOrder(ctx, "asc", "public_id")
	if err != nil {
		tests.Failed("Successfully retrieved all records for {{.Struct.Object.Name}} from db: %+q.", err)
	}
	tests.Passed("Successfully retrieved all records for {{.Struct.Object.Name}} from db.")

	if len(records) == 0 {
		tests.Failed("Successfully retrieved atleast 1 record for {{.Struct.Object.Name}} from db.")
	}
	tests.Passed("Successfully retrieved atleast 1 record for {{.Struct.Object.Name}} from db.")
}

// Test{{.Struct.Object.Name}}Create validates the creation of a {{.Struct.Object.Name}}
// record with a sqldb.
func Test{{.Struct.Object.Name}}Create(t *testing.T){
	events := metrics.New()
	if testing.Verbose(){
		events = metrics.New(custom.StackDisplay(os.Stdout))
	}
    api := sqldb.New(testCol, events, sql.NewDB(config, events))

	ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

	defer api.Delete(ctx, elem.PublicID)

	if err := api.Create(ctx, elem); err != nil {
		tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
	}
	tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")
}

// Test{{.Struct.Object.Name}}Update validates the update of a {{.Struct.Object.Name}}
// record with a sqldb.
func Test{{.Struct.Object.Name}}Update(t *testing.T){
	events := metrics.New()
	if testing.Verbose(){
		events = metrics.New(custom.StackDisplay(os.Stdout))
	}
    api := sqldb.New(testCol, events, sql.NewDB(config, events))

	ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

	defer api.Delete(ctx, elem.PublicID)

	if err := api.Create(ctx, elem); err != nil {
		tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
	}
	tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")

	elem2, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

	elem2.PublicID = elem.PublicID

	if err := api.Update(ctx, elem2.PublicID, elem2); err != nil {
		tests.Failed("Successfully updated record for {{.Struct.Object.Name}} into db: %+q.", err)
	}
	tests.Passed("Successfully updated record for {{.Struct.Object.Name}} into db.")
}

// Test{{.Struct.Object.Name}}Delete validates the removal of a {{.Struct.Object.Name}}
// record from a sqldb.
func Test{{.Struct.Object.Name}}Delete(t *testing.T){
	events := metrics.New()
	if testing.Verbose(){
		events = metrics.New(custom.StackDisplay(os.Stdout))
	}
    api := sqldb.New(testCol, events, sql.NewDB(config, events))

	ctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)
	defer cancel()

	elem, err := fixtures.Load{{.Struct.Object.Name.Name}}JSON(fixtures.{{.Struct.Object.Name.Name}}JSON)
	if err != nil {
		tests.Failed("Successfully loaded JSON for {{.Struct.Object.Name}} record: %+q.", err)
	}
	tests.Passed("Successfully loaded JSON for {{.Struct.Object.Name}} record")

	if err := api.Create(ctx, elem); err != nil {
		tests.Failed("Successfully added record for {{.Struct.Object.Name}} into db: %+q.", err)
	}
	tests.Passed("Successfully added record for {{.Struct.Object.Name}} into db.")

	if err := api.Delete(ctx, elem.PublicID); err != nil {
		tests.Failed("Successfully removed record for {{.Struct.Object.Name}} into db: %+q.", err)
	}
	tests.Passed("Successfully removed record for {{.Struct.Object.Name}} into db.")

	if _, err = api.Get(ctx, elem.PublicID); err == nil {
		tests.Failed("Successfully failed to get deleted record for {{.Struct.Object.Name}} into db.")
	}
	tests.Passed("Successfully failed to get deleted record for {{.Struct.Object.Name}} into db.")
}
