//+build ignore

package main

import (
	"fmt"
	"os"

	"github.com/influx6/trail/assets"
	"github.com/influx6/moz/gen"
)

func main(){
  packer := assets.New()
  packer.Register(".js", assets.JSPacker{})
  packer.Register(".css", assets.CSSPacker{})
  packer.Register(".less", assets.LessPacker{MainFile: ""})
  packer.Register(".static.html", assets.StaticMarkupPacker{})

  writer, statics, err := packer.Compile("./", false)
  if err != nil {
    panic(err)
  }

	pipeGen := gen.Block(
		gen.Package(
			gen.Name("{{.Package}}"),
      writer,
    ),
  )

	currentDir, err := os.Getwd()
	if err != nil {
    panic(err)
	}

	if err := writeToFile(pipeGen,fmt.Sprintf("%s_bundle.go", {{quote .Package}}),"./", currentDir); err != nil {
    panic(err)
	}

	for _, directive := range statics {
		if directive.Static == nil {
			continue
		}

		if err := writeToFile(directive.Writer, directive.Static.FileName, directive.Static.DirName, currentDir); err != nil {
			panic(err)
		}
	}

  fmt.Println("Bundling completed for '{{.Package}}'")
}

// writeToFile writes the giving content from the WriterTo instance to the file of
// the giving file.
func writeToFile(w io.WriterTo, fileName string, dirName string, currentDir string) error {
	coDir := filepath.Join(currentDir, dirName)

	if dirName != "" {
		if _, err := os.Stat(coDir); err != nil {
				if err := os.MkdirAll(coDir, 0700); err != nil && err != os.ErrExist {
					return err
				}

				fmt.Printf("- Created package directory: %q\n", coDir)
		}
	}

	coFile := filepath.Join(coDir, fileName)
	file, err := os.Create(coFile)
  if err != nil {
		return err
  }

  defer file.Close()

  if _, err := pipeGen.WriteTo(file); err != nil {
		return err
  }

	fmt.Printf("- Created directory file: %q\n", filepath.Join(dirName, fileName))
	return nil
}
